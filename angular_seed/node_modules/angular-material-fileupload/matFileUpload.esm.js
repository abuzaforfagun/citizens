import { Component, ContentChildren, Directive, ElementRef, EventEmitter, HostListener, Inject, Input, NgModule, Output, Pipe, QueryList, forwardRef } from '@angular/core';
import { HttpClient, HttpClientModule, HttpEventType, HttpHeaders, HttpParams } from '@angular/common/http';
import { merge as merge$1 } from 'rxjs/observable/merge';
import { startWith as startWith$1 } from 'rxjs/operators/startWith';
import { MatButtonModule, MatCardModule, MatProgressBarModule } from '@angular/material';
import { MatIconModule } from '@angular/material/icon';
import { CommonModule } from '@angular/common';

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __metadata(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

var MatFileUploadQueue = (function () {
    function MatFileUploadQueue() {
        this.files = [];
        this.httpRequestHeaders = new HttpHeaders().set("Content-Type", "multipart/form-data");
        this.httpRequestParams = new HttpParams();
        this.fileAlias = "file";
    }
    Object.defineProperty(MatFileUploadQueue.prototype, "fileUploadRemoveEvents", {
        get: function () {
            return merge$1.apply(void 0, this.fileUploads.map(function (fileUpload) { return fileUpload.removeEvent; }));
        },
        enumerable: true,
        configurable: true
    });
    MatFileUploadQueue.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._changeSubscription = this.fileUploads.changes.pipe(startWith$1(null)).subscribe(function () {
            if (_this._fileRemoveSubscription) {
                _this._fileRemoveSubscription.unsubscribe();
            }
            _this._listenTofileRemoved();
        });
    };
    MatFileUploadQueue.prototype._listenTofileRemoved = function () {
        var _this = this;
        this._fileRemoveSubscription = this.fileUploadRemoveEvents.subscribe(function (event) {
            _this.files.splice(event.id, 1);
        });
    };
    MatFileUploadQueue.prototype.add = function (file) {
        this.files.push(file);
    };
    MatFileUploadQueue.prototype.uploadAll = function () {
        this.fileUploads.forEach(function (fileUpload) { fileUpload.upload(); });
    };
    MatFileUploadQueue.prototype.removeAll = function () {
        this.files.splice(0, this.files.length);
    };
    MatFileUploadQueue.prototype.ngOnDestroy = function () {
        if (this.files) {
            this.removeAll();
        }
    };
    return MatFileUploadQueue;
}());
__decorate([
    ContentChildren(forwardRef(function () { return MatFileUpload; })),
    __metadata("design:type", typeof (_a$1 = typeof QueryList !== "undefined" && QueryList) === "function" && _a$1 || Object)
], MatFileUploadQueue.prototype, "fileUploads", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MatFileUploadQueue.prototype, "httpUrl", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MatFileUploadQueue.prototype, "httpRequestHeaders", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MatFileUploadQueue.prototype, "httpRequestParams", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MatFileUploadQueue.prototype, "fileAlias", void 0);
MatFileUploadQueue = __decorate([
    Component({
        selector: 'mat-file-upload-queue',
        template: "<ng-content></ng-content>\n<br>\n<button mat-raised-button color=\"primary\" *ngIf=\"files.length > 0\" (click)=\"uploadAll()\">Upload All</button>\n<button mat-raised-button color=\"primary\" *ngIf=\"files.length > 0\" (click)=\"removeAll()\">Remove All</button>\n",
        exportAs: 'matFileUploadQueue',
    })
], MatFileUploadQueue);
var _a$1;

var MatFileUpload = (function () {
    function MatFileUpload(HttpClient$$1, matFileUploadQueue) {
        this.HttpClient = HttpClient$$1;
        this.matFileUploadQueue = matFileUploadQueue;
        this.isUploading = false;
        this.httpUrl = 'http://localhost:8080';
        this.httpRequestHeaders = new HttpHeaders().set("Content-Type", "multipart/form-data");
        this.httpRequestParams = new HttpParams();
        this.fileAlias = "file";
        this.removeEvent = new EventEmitter();
        this.onUpload = new EventEmitter();
        this.progressPercentage = 0;
        this.loaded = 0;
        this.total = 0;
        if (matFileUploadQueue) {
            this.httpUrl = matFileUploadQueue.httpUrl || this.httpUrl;
            this.httpRequestHeaders = matFileUploadQueue.httpRequestHeaders || this.httpRequestHeaders;
            this.httpRequestParams = matFileUploadQueue.httpRequestParams || this.httpRequestParams;
            this.fileAlias = matFileUploadQueue.fileAlias || this.fileAlias;
        }
    }
    Object.defineProperty(MatFileUpload.prototype, "file", {
        get: function () {
            return this._file;
        },
        set: function (file) {
            this._file = file;
            this.total = this._file.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatFileUpload.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (id) {
            this._id = id;
        },
        enumerable: true,
        configurable: true
    });
    MatFileUpload.prototype.upload = function () {
        var _this = this;
        this.isUploading = true;
        var formData = new FormData();
        formData.set(this.fileAlias, this._file, this._file.name);
        this.fileUploadSubscription = this.HttpClient.post(this.httpUrl, formData, {
            headers: this.httpRequestHeaders,
            observe: "events",
            params: this.httpRequestParams,
            reportProgress: true,
            responseType: "json"
        }).subscribe(function (event) {
            if (event.type === HttpEventType.UploadProgress) {
                _this.progressPercentage = Math.floor(event.loaded * 100 / event.total);
                _this.loaded = event.loaded;
                _this.total = event.total;
            }
            _this.onUpload.emit({ file: _this._file, event: event });
        }, function (error) {
            if (_this.fileUploadSubscription) {
                _this.fileUploadSubscription.unsubscribe();
            }
            _this.isUploading = false;
            _this.onUpload.emit({ file: _this._file, event: event });
        });
    };
    MatFileUpload.prototype.remove = function () {
        if (this.fileUploadSubscription) {
            this.fileUploadSubscription.unsubscribe();
        }
        this.removeEvent.emit(this);
    };
    MatFileUpload.prototype.ngOnDestroy = function () {
        console.log('file ' + this._file.name + ' destroyed...');
    };
    return MatFileUpload;
}());
__decorate([
    Input(),
    __metadata("design:type", String)
], MatFileUpload.prototype, "httpUrl", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MatFileUpload.prototype, "httpRequestHeaders", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MatFileUpload.prototype, "httpRequestParams", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MatFileUpload.prototype, "fileAlias", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], MatFileUpload.prototype, "file", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], MatFileUpload.prototype, "id", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], MatFileUpload.prototype, "removeEvent", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], MatFileUpload.prototype, "onUpload", void 0);
MatFileUpload = __decorate([
    Component({
        selector: 'mat-file-upload',
        template: "<mat-card>\n    <span class=\"file-info\">{{file.name}}({{file.size | bytes}})</span>\n    <section class=\"example-section\">\n        <mat-progress-bar class=\"example-margin\" [value]=\"progressPercentage\"></mat-progress-bar>\n        <a [ngClass]=\"{'disabled' : isUploading}\"><mat-icon class=\"action\" (click)=\"upload()\">file_upload</mat-icon></a>\n        <mat-icon class=\"action\" (click)=\"remove()\">cancel</mat-icon>\n    </section>\n    <span class=\"file-info\">{{progressPercentage}}%</span><span> {{loaded | bytes}} of {{total | bytes}}</span>\n</mat-card>",
        exportAs: 'matFileUpload',
        host: {
            'class': 'mat-file-upload',
        },
        styles: [".dropzone {\n  background-color: brown;\n  width: 100px;\n  height: 100px; }\n\n.example-section {\n  display: flex;\n  align-content: center;\n  align-items: center;\n  height: 10px; }\n\n.file-info {\n  font-size: .85rem; }\n\n#drop_zone {\n  border: 5px solid blue;\n  width: 200px;\n  height: 100px; }\n\n.action {\n  cursor: pointer;\n  outline: none; }\n\na.disabled {\n  pointer-events: none; }\n\n.upload-drop-zone {\n  height: 200px;\n  border-width: 2px;\n  margin-bottom: 20px; }\n\n/* skin.css Style*/\n.upload-drop-zone {\n  color: #ccc;\n  border-style: dashed;\n  border-color: #ccc;\n  line-height: 200px;\n  text-align: center; }\n\n.upload-drop-zone.drop {\n  color: #222;\n  border-color: #222; }\n"],
    }),
    __param(1, Inject(forwardRef(function () { return MatFileUploadQueue; }))),
    __metadata("design:paramtypes", [typeof (_a = typeof HttpClient !== "undefined" && HttpClient) === "function" && _a || Object, typeof (_b = typeof MatFileUploadQueue !== "undefined" && MatFileUploadQueue) === "function" && _b || Object])
], MatFileUpload);
var _a;
var _b;

var BytesPipe = (function () {
    function BytesPipe() {
    }
    BytesPipe.prototype.transform = function (bytes) {
        if (isNaN(parseFloat('' + bytes)) || !isFinite(bytes))
            return '-';
        if (bytes <= 0)
            return '0';
        var units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB'], number = Math.floor(Math.log(bytes) / Math.log(1024));
        return (bytes / Math.pow(1024, Math.floor(number))).toFixed(1) + ' ' + units[number];
    };
    return BytesPipe;
}());
BytesPipe = __decorate([
    Pipe({ name: 'bytes' })
], BytesPipe);

/**
 * A material design file upload queue component.
 */
var FileUploadInputFor = (function () {
    function FileUploadInputFor(element) {
        this.element = element;
        this._queue = null;
        this.onFileSelected = new EventEmitter();
        this._element = this.element.nativeElement;
    }
    Object.defineProperty(FileUploadInputFor.prototype, "fileUploadQueue", {
        set: function (value) {
            if (value) {
                this._queue = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    FileUploadInputFor.prototype.onChange = function () {
        var files = this.element.nativeElement.files;
        this.onFileSelected.emit(files);
        for (var i = 0; i < files.length; i++) {
            this._queue.add(files[i]);
        }
        this.element.nativeElement.value = '';
    };
    FileUploadInputFor.prototype.onDrop = function (event) {
        var files = event.dataTransfer.files;
        this.onFileSelected.emit(files);
        for (var i = 0; i < files.length; i++) {
            this._queue.add(files[i]);
        }
        event.preventDefault();
        event.stopPropagation();
        this.element.nativeElement.value = '';
    };
    FileUploadInputFor.prototype.onDropOver = function (event) {
        event.preventDefault();
    };
    return FileUploadInputFor;
}());
__decorate([
    Output(),
    __metadata("design:type", typeof (_a$2 = typeof EventEmitter !== "undefined" && EventEmitter) === "function" && _a$2 || Object)
], FileUploadInputFor.prototype, "onFileSelected", void 0);
__decorate([
    Input('fileUploadInputFor'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], FileUploadInputFor.prototype, "fileUploadQueue", null);
__decorate([
    HostListener('change'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], FileUploadInputFor.prototype, "onChange", null);
__decorate([
    HostListener('drop', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], FileUploadInputFor.prototype, "onDrop", null);
__decorate([
    HostListener('dragover', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], FileUploadInputFor.prototype, "onDropOver", null);
FileUploadInputFor = __decorate([
    Directive({
        selector: 'input[fileUploadInputFor], div[fileUploadInputFor]',
    }),
    __metadata("design:paramtypes", [typeof (_b$2 = typeof ElementRef !== "undefined" && ElementRef) === "function" && _b$2 || Object])
], FileUploadInputFor);
var _a$2;
var _b$2;

var MatFileUploadModule = (function () {
    function MatFileUploadModule() {
    }
    return MatFileUploadModule;
}());
MatFileUploadModule = __decorate([
    NgModule({
        imports: [
            MatButtonModule,
            MatProgressBarModule,
            MatIconModule,
            MatCardModule,
            HttpClientModule,
            CommonModule
        ],
        declarations: [
            MatFileUpload,
            MatFileUploadQueue,
            FileUploadInputFor,
            BytesPipe
        ],
        exports: [
            MatFileUpload,
            MatFileUploadQueue,
            FileUploadInputFor,
            BytesPipe
        ]
    })
], MatFileUploadModule);

export { MatFileUpload, MatFileUploadQueue, BytesPipe, FileUploadInputFor, MatFileUploadModule };
//# sourceMappingURL=matFileUpload.esm.js.map
