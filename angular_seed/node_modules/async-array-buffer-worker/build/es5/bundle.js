(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('worker-factory')) :
    typeof define === 'function' && define.amd ? define(['worker-factory'], factory) :
    (factory(global.workerFactory));
}(this, (function (workerFactory) { 'use strict';

    var allocate = function allocate(length) {
        return new ArrayBuffer(length);
    };

    workerFactory.createWorker(self, {
        allocate: function allocate$$1(_ref) {
            var length = _ref.length;

            var arrayBuffer = allocate(length);
            return { result: arrayBuffer, transferables: [arrayBuffer] };
        },
        deallocate: function deallocate() /* arrayBuffer */{
            // Just accept the arrayBuffer.
            return { result: undefined };
        }
    });

})));
