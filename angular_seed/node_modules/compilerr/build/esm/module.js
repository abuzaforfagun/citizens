import dashify from 'dashify';
import indefiniteArticle from 'indefinite-article';
var applyModifiers = function (name, modifiers) {
    if (modifiers === undefined) {
        return name;
    }
    return modifiers.reduce(function (modifiedName, modifier) {
        if (modifier === 'capitalize') {
            var head = modifiedName
                .charAt(0)
                .toUpperCase();
            var tail = modifiedName.slice(1);
            return "" + head + tail;
        }
        if (modifier === 'dashify') {
            return dashify(modifiedName);
        }
        if (modifier === 'prependIndefiniteArticle') {
            return indefiniteArticle(modifiedName) + " " + modifiedName;
        }
        return modifiedName;
    }, name);
};
var buildRegex = function (variable) {
    var expression = variable.name + variable.modifiers
        .map(function (modifier) { return "\\." + modifier + "\\(\\)"; })
        .join('');
    return new RegExp("\\$\\{" + expression + "}", 'g');
};
var preRenderString = function (string, parameters) {
    var expressionRegex = /\${([^.}]+)((\.[^(]+\(\))*)}/g;
    var variables = [];
    var expressionResult = expressionRegex.exec(string);
    while (expressionResult !== null) {
        var variable = {
            modifiers: [],
            name: expressionResult[1]
        };
        if (expressionResult[3] !== undefined) {
            var modifiersRegex = /\.[^(]+\(\)/g;
            var modifiersRegexResult = modifiersRegex.exec(expressionResult[2]);
            while (modifiersRegexResult !== null) {
                variable.modifiers.push(modifiersRegexResult[0].slice(1, -2));
                modifiersRegexResult = modifiersRegex.exec(expressionResult[2]);
            }
        }
        variables.push(variable);
        expressionResult = expressionRegex.exec(string);
    }
    var preRenderedParts = variables
        .reduce(function (parts, variable) { return parts
        .map(function (part) {
        if (typeof part === 'string') {
            return part
                .split(buildRegex(variable))
                .reduce(function (prts, prt, index) {
                if (index === 0) {
                    return [prt];
                }
                if (variable.name in parameters) {
                    return prts.concat([applyModifiers(parameters[variable.name], variable.modifiers), prt]);
                }
                return prts.concat([
                    function (prmtrs) { return applyModifiers(prmtrs[variable.name], variable.modifiers); },
                    prt
                ]);
            }, []);
        }
        return [part];
    })
        .reduce(function (prts, part) { return prts.concat(part); }, []); }, [string]);
    return function (missingParameters) { return preRenderedParts
        .reduce(function (renderedParts, preRenderedPart) {
        if (typeof preRenderedPart === 'string') {
            return renderedParts.concat([preRenderedPart]);
        }
        return renderedParts.concat([preRenderedPart(missingParameters)]);
    }, [])
        .join(''); };
};
export var compile = function (template, knownParameters) {
    if (knownParameters === void 0) { knownParameters = {}; }
    var renderCode = (template.code === undefined) ? undefined : preRenderString(template.code, knownParameters);
    var renderMessage = (template.message === undefined) ? undefined : preRenderString(template.message, knownParameters);
    function render(causeOrMissingParameters, optionalCause) {
        if (causeOrMissingParameters === void 0) { causeOrMissingParameters = {}; }
        var hasNoOptionalCause = (optionalCause === undefined &&
            (causeOrMissingParameters instanceof Error ||
                (causeOrMissingParameters.code !== undefined &&
                    causeOrMissingParameters.code.slice(-9) === 'Exception')));
        var _a = hasNoOptionalCause ?
            {
                cause: causeOrMissingParameters,
                missingParameters: {}
            } :
            {
                cause: optionalCause,
                missingParameters: causeOrMissingParameters
            }, cause = _a.cause, missingParameters = _a.missingParameters;
        var err = ((renderMessage === undefined) ?
            new Error() :
            new Error(renderMessage(missingParameters)));
        if (cause !== null) {
            err.cause = cause;
        }
        if (renderCode !== undefined) {
            err.code = renderCode(missingParameters);
        }
        if (template.status !== undefined) {
            err.status = template.status;
        }
        return err;
    }
    return render;
};
//# sourceMappingURL=/build/es2015/module.js.map