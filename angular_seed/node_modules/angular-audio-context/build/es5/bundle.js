(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('standardized-audio-context'), require('tslib'), require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define(['exports', 'standardized-audio-context', 'tslib', '@angular/core', '@angular/common'], factory) :
    (factory((global.angularAudioContext = {}),global.standardizedAudioContext,global.tslib_1,global.core,global.common));
}(this, (function (exports,standardizedAudioContext,tslib_1,core,common) { 'use strict';

    function audioContextFactory(latencyHint) {
        return new standardizedAudioContext.AudioContext({ latencyHint: latencyHint });
    }

    var AudioContextProxy = /** @class */function (_super) {
        tslib_1.__extends(AudioContextProxy, _super);
        function AudioContextProxy() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AudioContextProxy;
    }(standardizedAudioContext.AudioContext);

    function isSupportedFactory() {
        return standardizedAudioContext.isSupported;
    }

    var latencyHintToken = new core.InjectionToken('LATENCY_HINT');

    var isSupported = new core.InjectionToken('IS_SUPPORTED_PROMISE');
    var ɵ0 = isSupportedFactory;
    var AudioContextModule = /** @class */function () {
        function AudioContextModule() {}
        AudioContextModule.forRoot = function (latencyHint) {
            return {
                ngModule: AudioContextModule,
                providers: [{ deps: [latencyHintToken], provide: AudioContextProxy, useFactory: audioContextFactory }, { provide: latencyHintToken, useValue: latencyHint }]
            };
        };
        AudioContextModule.forChild = function () {
            return {
                ngModule: AudioContextModule
            };
        };
        AudioContextModule.decorators = [{ type: core.NgModule, args: [{
                imports: [common.CommonModule],
                providers: [{ provide: isSupported, useFactory: ɵ0 }]
            }] }];
        return AudioContextModule;
    }();

    exports.AudioContext = AudioContextProxy;
    exports.isSupported = isSupported;
    exports.AudioContextModule = AudioContextModule;
    exports.ɵ0 = ɵ0;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
