(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('babel-runtime/regenerator'), require('tslib'), require('babel-runtime/helpers/defineProperty'), require('babel-runtime/helpers/slicedToArray'), require('fast-unique-numbers')) :
    typeof define === 'function' && define.amd ? define(['exports', 'babel-runtime/regenerator', 'tslib', 'babel-runtime/helpers/defineProperty', 'babel-runtime/helpers/slicedToArray', 'fast-unique-numbers'], factory) :
    (factory((global.brokerFactory = {}),global._regeneratorRuntime,global.tslib_1,global._defineProperty,global._slicedToArray,global.fastUniqueNumbers));
}(this, (function (exports,_regeneratorRuntime,tslib_1,_defineProperty,_slicedToArray,fastUniqueNumbers) { 'use strict';

    _regeneratorRuntime = _regeneratorRuntime && _regeneratorRuntime.hasOwnProperty('default') ? _regeneratorRuntime['default'] : _regeneratorRuntime;
    _defineProperty = _defineProperty && _defineProperty.hasOwnProperty('default') ? _defineProperty['default'] : _defineProperty;
    _slicedToArray = _slicedToArray && _slicedToArray.hasOwnProperty('default') ? _slicedToArray['default'] : _slicedToArray;

    var isMessagePort = function isMessagePort(sender) {
        return typeof sender.start === 'function';
    };

    var PORT_MAP = new WeakMap();

    var _this = undefined;
    var extendBrokerImplementation = function extendBrokerImplementation(partialBrokerImplementation) {
        // @todo The spread operator can't be used here because TypeScript does not believe that partialBrokerImplementation is an object.
        return Object.assign({}, partialBrokerImplementation, {
            connect: function connect(_ref) {
                var call = _ref.call;

                return function () {
                    return tslib_1.__awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
                        var _ref2, port1, port2, portId;

                        return _regeneratorRuntime.wrap(function _callee$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        _ref2 = new MessageChannel(), port1 = _ref2.port1, port2 = _ref2.port2;
                                        _context.next = 3;
                                        return call('connect', { port: port1 }, [port1]);

                                    case 3:
                                        portId = _context.sent;

                                        PORT_MAP.set(port2, portId);
                                        return _context.abrupt('return', port2);

                                    case 6:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, _callee, this);
                    }));
                };
            },
            disconnect: function disconnect(_ref3) {
                var call = _ref3.call;

                return function (port) {
                    return tslib_1.__awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
                        var portId;
                        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        portId = PORT_MAP.get(port);

                                        if (!(portId === undefined)) {
                                            _context2.next = 3;
                                            break;
                                        }

                                        throw new Error('The given port is not connected.');

                                    case 3:
                                        _context2.next = 5;
                                        return call('disconnect', { portId: portId });

                                    case 5:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, _callee2, this);
                    }));
                };
            }
        });
    };

    var ONGOING_REQUESTS = new WeakMap();
    var createOrGetOngoingRequests = function createOrGetOngoingRequests(sender) {
        if (ONGOING_REQUESTS.has(sender)) {
            // @todo TypeScript needs to be convinced that has() works as expected.
            return ONGOING_REQUESTS.get(sender);
        }
        var ongoingRequests = new Map();
        ONGOING_REQUESTS.set(sender, ongoingRequests);
        return ongoingRequests;
    };
    var createBroker = function createBroker(brokerImplementation) {
        var fullBrokerImplementation = extendBrokerImplementation(brokerImplementation);
        return function (sender) {
            var ongoingRequests = createOrGetOngoingRequests(sender);
            sender.addEventListener('message', function (_ref) {
                var message = _ref.data;
                var id = message.id;

                if (id !== null && ongoingRequests.has(id)) {
                    var _ongoingRequests$get = ongoingRequests.get(id),
                        reject = _ongoingRequests$get.reject,
                        resolve = _ongoingRequests$get.resolve;

                    ongoingRequests.delete(id);
                    if (message.error === undefined) {
                        resolve(message.result);
                    } else {
                        reject(new Error(message.error.message));
                    }
                }
            });
            if (isMessagePort(sender)) {
                sender.start();
            }
            var call = function call(method, params) {
                var transferables = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

                return new Promise(function (resolve, reject) {
                    var id = fastUniqueNumbers.generateUniqueNumber(ongoingRequests);
                    ongoingRequests.set(id, { reject: reject, resolve: resolve });
                    sender.postMessage({ id: id, method: method, params: params }, transferables);
                });
            };
            var notify = function notify(method, params) {
                var transferables = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

                sender.postMessage({ id: null, method: method, params: params }, transferables);
            };
            var functions = {};
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Object.entries(fullBrokerImplementation)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _step$value = _slicedToArray(_step.value, 2),
                        key = _step$value[0],
                        handler = _step$value[1];

                    functions = Object.assign({}, functions, _defineProperty({}, key, handler({ call: call, notify: notify })));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return Object.assign({}, functions);
        };
    };

    exports.createBroker = createBroker;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
