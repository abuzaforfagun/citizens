export var wrapAudioNodeDisconnectMethod = function (nativeAudioNode) {
    var destinations = new Map();
    nativeAudioNode.connect = (function (connect) {
        return function (destination, output, input) {
            if (output === void 0) { output = 0; }
            if (input === void 0) { input = 0; }
            destinations.set(destination, { input: input, output: output });
            if (destination instanceof AudioNode) {
                return connect.call(nativeAudioNode, destination, output, input);
            }
            return connect.call(nativeAudioNode, destination, output);
        };
    })(nativeAudioNode.connect);
    nativeAudioNode.disconnect = (function (disconnect) {
        return function (outputOrDestination, _output, _input) {
            disconnect.apply(nativeAudioNode);
            if (outputOrDestination === undefined) {
                destinations.clear();
            }
            else if (destinations.has(outputOrDestination)) {
                destinations.delete(outputOrDestination);
                destinations.forEach(function (_a, dstntn) {
                    var input = _a.input, output = _a.output;
                    nativeAudioNode.connect(dstntn, input, output);
                });
            }
        };
    })(nativeAudioNode.disconnect);
};
//# sourceMappingURL=/build/es2015/wrappers/audio-node-disconnect-method.js.map