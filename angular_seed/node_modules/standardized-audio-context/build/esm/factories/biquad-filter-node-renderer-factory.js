var _this = this;
import * as tslib_1 from "tslib";
import { connectAudioParam } from '../helpers/connect-audio-param';
import { getNativeAudioNode } from '../helpers/get-native-audio-node';
import { isOwnedByContext } from '../helpers/is-owned-by-context';
import { renderAutomation } from '../helpers/render-automation';
import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';
export var createBiquadFilterNodeRendererFactory = function (createNativeBiquadFilterNode) {
    return function () {
        var nativeBiquadFilterNode = null;
        return {
            render: function (proxy, nativeOfflineAudioContext) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var options;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (nativeBiquadFilterNode !== null) {
                                return [2 /*return*/, nativeBiquadFilterNode];
                            }
                            nativeBiquadFilterNode = getNativeAudioNode(proxy);
                            if (!!isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext)) return [3 /*break*/, 5];
                            options = {
                                Q: nativeBiquadFilterNode.Q.value,
                                channelCount: nativeBiquadFilterNode.channelCount,
                                channelCountMode: nativeBiquadFilterNode.channelCountMode,
                                channelInterpretation: nativeBiquadFilterNode.channelInterpretation,
                                detune: nativeBiquadFilterNode.detune.value,
                                frequency: nativeBiquadFilterNode.frequency.value,
                                gain: nativeBiquadFilterNode.gain.value,
                                type: nativeBiquadFilterNode.type
                            };
                            nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);
                            return [4 /*yield*/, renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune)];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency)];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain)];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 10];
                        case 5: return [4 /*yield*/, connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.Q)];
                        case 6:
                            _a.sent();
                            return [4 /*yield*/, connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.detune)];
                        case 7:
                            _a.sent();
                            return [4 /*yield*/, connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.frequency)];
                        case 8:
                            _a.sent();
                            return [4 /*yield*/, connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.gain)];
                        case 9:
                            _a.sent();
                            _a.label = 10;
                        case 10: return [4 /*yield*/, renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode)];
                        case 11:
                            _a.sent();
                            return [2 /*return*/, nativeBiquadFilterNode];
                    }
                });
            }); }
        };
    };
};
//# sourceMappingURL=/build/es2015/factories/biquad-filter-node-renderer-factory.js.map