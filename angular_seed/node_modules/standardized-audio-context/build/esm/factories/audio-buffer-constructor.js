import * as tslib_1 from "tslib";
import { cacheTestResult } from '../helpers/cache-test-result';
import { testAudioBufferCopyChannelMethodsSubarraySupport } from '../support-testers/audio-buffer-copy-channel-methods-subarray';
import { wrapAudioBufferCopyChannelMethods } from '../wrappers/audio-buffer-copy-channel-methods';
import { wrapAudioBufferCopyChannelMethodsSubarray } from '../wrappers/audio-buffer-copy-channel-methods-subarray';
var DEFAULT_OPTIONS = {
    numberOfChannels: 1
};
export var createAudioBufferConstructor = function (nativeOfflineAudioContextConstructor) {
    var nativeOfflineAudioContext = null;
    return /** @class */ (function () {
        function AudioBuffer(options) {
            if (nativeOfflineAudioContextConstructor === null) {
                throw new Error(); // @todo
            }
            var _a = tslib_1.__assign({}, DEFAULT_OPTIONS, options), length = _a.length, numberOfChannels = _a.numberOfChannels, sampleRate = _a.sampleRate;
            if (nativeOfflineAudioContext === null) {
                nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
            }
            var audioBuffer = nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);
            // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
            if (typeof audioBuffer.copyFromChannel !== 'function') {
                wrapAudioBufferCopyChannelMethods(audioBuffer);
                // Bug #42: Firefox does not yet fully support copyFromChannel() and copyToChannel().
            }
            else if (!cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, function () { return testAudioBufferCopyChannelMethodsSubarraySupport(audioBuffer); })) {
                wrapAudioBufferCopyChannelMethodsSubarray(audioBuffer);
            }
            /*
             * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native
             * (Offline)AudioContexts.
             */
            return audioBuffer;
        }
        // This method needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.
        AudioBuffer.prototype.getChannelData = function (_) {
            return new Float32Array(0);
        };
        // This method needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.
        AudioBuffer.prototype.copyFromChannel = function (_1, _2, _3) {
            if (_3 === void 0) { _3 = 0; }
        }; // tslint:disable-line:no-empty
        // This method needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.
        AudioBuffer.prototype.copyToChannel = function (_1, _2, _3) {
            if (_3 === void 0) { _3 = 0; }
        }; // tslint:disable-line:no-empty
        return AudioBuffer;
    }());
};
//# sourceMappingURL=/build/es2015/factories/audio-buffer-constructor.js.map