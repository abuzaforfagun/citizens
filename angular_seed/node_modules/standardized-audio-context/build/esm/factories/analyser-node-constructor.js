import * as tslib_1 from "tslib";
import { getNativeContext } from '../helpers/get-native-context';
var DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    fftSize: 2048,
    maxDecibels: -30,
    minDecibels: -100,
    smoothingTimeConstant: 0.8
};
export var createAnalyserNodeConstructor = function (createAnalyserNodeRenderer, createNativeAnalyserNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(AnalyserNode, _super);
        function AnalyserNode(context, options) {
            if (options === void 0) { options = DEFAULT_OPTIONS; }
            var _this = this;
            var nativeContext = getNativeContext(context);
            var mergedOptions = tslib_1.__assign({}, DEFAULT_OPTIONS, options);
            var nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);
            var analyserNodeRenderer = (isNativeOfflineAudioContext(nativeContext)) ? createAnalyserNodeRenderer() : null;
            _this = _super.call(this, context, nativeAnalyserNode, analyserNodeRenderer) || this;
            _this._nativeAnalyserNode = nativeAnalyserNode;
            return _this;
        }
        Object.defineProperty(AnalyserNode.prototype, "fftSize", {
            get: function () {
                return this._nativeAnalyserNode.fftSize;
            },
            set: function (value) {
                this._nativeAnalyserNode.fftSize = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnalyserNode.prototype, "frequencyBinCount", {
            get: function () {
                return this._nativeAnalyserNode.frequencyBinCount;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnalyserNode.prototype, "maxDecibels", {
            get: function () {
                return this._nativeAnalyserNode.maxDecibels;
            },
            set: function (value) {
                this._nativeAnalyserNode.maxDecibels = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnalyserNode.prototype, "minDecibels", {
            get: function () {
                return this._nativeAnalyserNode.minDecibels;
            },
            set: function (value) {
                this._nativeAnalyserNode.minDecibels = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnalyserNode.prototype, "smoothingTimeConstant", {
            get: function () {
                return this._nativeAnalyserNode.smoothingTimeConstant;
            },
            set: function (value) {
                this._nativeAnalyserNode.smoothingTimeConstant = value;
            },
            enumerable: true,
            configurable: true
        });
        AnalyserNode.prototype.getByteFrequencyData = function (array) {
            this._nativeAnalyserNode.getByteFrequencyData(array);
        };
        AnalyserNode.prototype.getByteTimeDomainData = function (array) {
            this._nativeAnalyserNode.getByteTimeDomainData(array);
        };
        AnalyserNode.prototype.getFloatFrequencyData = function (array) {
            this._nativeAnalyserNode.getFloatFrequencyData(array);
        };
        AnalyserNode.prototype.getFloatTimeDomainData = function (array) {
            this._nativeAnalyserNode.getFloatTimeDomainData(array);
        };
        return AnalyserNode;
    }(noneAudioDestinationNodeConstructor));
};
//# sourceMappingURL=/build/es2015/factories/analyser-node-constructor.js.map