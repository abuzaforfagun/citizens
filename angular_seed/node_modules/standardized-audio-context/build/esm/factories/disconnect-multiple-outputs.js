import { isNativeAudioNode } from '../guards/native-audio-node';
var getOutputAudioNodeAtIndex = function (createIndexSizeError, outputAudioNodes, output) {
    var outputAudioNode = outputAudioNodes[output];
    if (outputAudioNode === undefined) {
        throw createIndexSizeError();
    }
    return outputAudioNode;
};
export var createDisconnectMultipleOutputs = function (createIndexSizeError) {
    return function (outputAudioNodes, outputOrDestinationAudioNodeOrAudioParam, output, input) {
        if (outputOrDestinationAudioNodeOrAudioParam === void 0) { outputOrDestinationAudioNodeOrAudioParam = undefined; }
        if (output === void 0) { output = undefined; }
        if (input === void 0) { input = 0; }
        if (outputOrDestinationAudioNodeOrAudioParam === undefined) {
            return outputAudioNodes
                .forEach(function (outputAudioNode) { return outputAudioNode.disconnect(); });
        }
        if (typeof outputOrDestinationAudioNodeOrAudioParam === 'number') {
            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, outputOrDestinationAudioNodeOrAudioParam)
                .disconnect();
        }
        if (isNativeAudioNode(outputOrDestinationAudioNodeOrAudioParam)) {
            if (output === undefined) {
                return outputAudioNodes
                    .forEach(function (outputAudioNode) { return outputAudioNode.disconnect(outputOrDestinationAudioNodeOrAudioParam); });
            }
            if (input === undefined) {
                return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)
                    .disconnect(outputOrDestinationAudioNodeOrAudioParam, 0);
            }
            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)
                .disconnect(outputOrDestinationAudioNodeOrAudioParam, 0, input);
        }
        if (output === undefined) {
            return outputAudioNodes
                .forEach(function (outputAudioNode) { return outputAudioNode.disconnect(outputOrDestinationAudioNodeOrAudioParam); });
        }
        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)
            .disconnect(outputOrDestinationAudioNodeOrAudioParam, 0);
    };
};
//# sourceMappingURL=/build/es2015/factories/disconnect-multiple-outputs.js.map