var _this = this;
import * as tslib_1 from "tslib";
import { getNativeAudioNode } from '../helpers/get-native-audio-node';
import { isOwnedByContext } from '../helpers/is-owned-by-context';
import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';
export var createAnalyserNodeRendererFactory = function (createNativeAnalyserNode) {
    return function () {
        var nativeAnalyserNode = null;
        return {
            render: function (proxy, nativeOfflineAudioContext) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var options;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (nativeAnalyserNode !== null) {
                                return [2 /*return*/, nativeAnalyserNode];
                            }
                            nativeAnalyserNode = getNativeAudioNode(proxy);
                            /*
                             * If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created
                             * again.
                             */
                            if (!isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext)) {
                                options = {
                                    channelCount: nativeAnalyserNode.channelCount,
                                    channelCountMode: nativeAnalyserNode.channelCountMode,
                                    channelInterpretation: nativeAnalyserNode.channelInterpretation,
                                    fftSize: nativeAnalyserNode.fftSize,
                                    maxDecibels: nativeAnalyserNode.maxDecibels,
                                    minDecibels: nativeAnalyserNode.minDecibels,
                                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant
                                };
                                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);
                            }
                            return [4 /*yield*/, renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, nativeAnalyserNode];
                    }
                });
            }); }
        };
    };
};
//# sourceMappingURL=/build/es2015/factories/analyser-node-renderer-factory.js.map