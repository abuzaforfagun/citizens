import * as tslib_1 from "tslib";
import { getNativeContext } from '../helpers/get-native-context';
var DEFAULT_OPTIONS = {
    channelCount: 6,
    channelCountMode: 'explicit',
    channelInterpretation: 'discrete',
    numberOfOutputs: 6
};
var sanitizedOptions = function (options) {
    return tslib_1.__assign({}, options, { channelCount: options.numberOfOutputs });
};
export var createChannelSplitterNodeConstructor = function (createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(ChannelSplitterNode, _super);
        function ChannelSplitterNode(context, options) {
            if (options === void 0) { options = DEFAULT_OPTIONS; }
            var _this = this;
            var nativeContext = getNativeContext(context);
            var mergedOptions = sanitizedOptions(tslib_1.__assign({}, DEFAULT_OPTIONS, options));
            var nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);
            var channelSplitterNodeRenderer = (isNativeOfflineAudioContext(nativeContext)) ? createChannelSplitterNodeRenderer() : null;
            _this = _super.call(this, context, nativeChannelSplitterNode, channelSplitterNodeRenderer) || this;
            return _this;
        }
        return ChannelSplitterNode;
    }(noneAudioDestinationNodeConstructor));
};
//# sourceMappingURL=/build/es2015/factories/channel-splitter-node-constructor.js.map