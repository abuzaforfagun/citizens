import * as tslib_1 from "tslib";
import { getNativeContext } from '../helpers/get-native-context';
var DEFAULT_OPTIONS = {
    Q: 1,
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    detune: 0,
    frequency: 350,
    gain: 0,
    type: 'lowpass'
};
export var createBiquadFilterNodeConstructor = function (createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(BiquadFilterNode, _super);
        function BiquadFilterNode(context, options) {
            if (options === void 0) { options = DEFAULT_OPTIONS; }
            var _this = this;
            var nativeContext = getNativeContext(context);
            var mergedOptions = tslib_1.__assign({}, DEFAULT_OPTIONS, options);
            var nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);
            var isOffline = isNativeOfflineAudioContext(nativeContext);
            var biquadFilterNodeRenderer = (isOffline) ? createBiquadFilterNodeRenderer() : null;
            _this = _super.call(this, context, nativeBiquadFilterNode, biquadFilterNodeRenderer) || this;
            // Bug #80: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.
            _this._Q = createAudioParam(context, isOffline, nativeBiquadFilterNode.Q, 3.4028234663852886e38, -3.4028234663852886e38);
            // Bug #78: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.
            _this._detune = createAudioParam(context, isOffline, nativeBiquadFilterNode.detune, 3.4028234663852886e38, -3.4028234663852886e38);
            // Bug #77: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.
            _this._frequency = createAudioParam(context, isOffline, nativeBiquadFilterNode.frequency, 3.4028234663852886e38, -3.4028234663852886e38);
            // Bug #79: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.
            _this._gain = createAudioParam(context, isOffline, nativeBiquadFilterNode.gain, 3.4028234663852886e38, -3.4028234663852886e38);
            _this._nativeBiquadFilterNode = nativeBiquadFilterNode;
            return _this;
        }
        Object.defineProperty(BiquadFilterNode.prototype, "Q", {
            get: function () {
                return this._Q;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BiquadFilterNode.prototype, "detune", {
            get: function () {
                return this._detune;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BiquadFilterNode.prototype, "frequency", {
            get: function () {
                return this._frequency;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BiquadFilterNode.prototype, "gain", {
            get: function () {
                return this._gain;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BiquadFilterNode.prototype, "type", {
            get: function () {
                return this._nativeBiquadFilterNode.type;
            },
            set: function (value) {
                this._nativeBiquadFilterNode.type = value;
            },
            enumerable: true,
            configurable: true
        });
        BiquadFilterNode.prototype.getFrequencyResponse = function (frequencyHz, magResponse, phaseResponse) {
            this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);
            // Bug #68: Only Chrome does throw an error if the parameters differ in their length.
            if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {
                throw createInvalidAccessError();
            }
        };
        return BiquadFilterNode;
    }(noneAudioDestinationNodeConstructor));
};
//# sourceMappingURL=/build/es2015/factories/biquad-filter-node-constructor.js.map