var _this = this;
import * as tslib_1 from "tslib";
import { connectAudioParam } from '../helpers/connect-audio-param';
import { getNativeAudioNode } from '../helpers/get-native-audio-node';
import { isOwnedByContext } from '../helpers/is-owned-by-context';
import { renderAutomation } from '../helpers/render-automation';
import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';
export var createOscillatorNodeRendererFactory = function (createNativeOscillatorNode) {
    return function () {
        var nativeOscillatorNode = null;
        var start = null;
        var stop = null;
        return {
            set start(value) {
                start = value;
            },
            set stop(value) {
                stop = value;
            },
            render: function (proxy, nativeOfflineAudioContext) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var options;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (nativeOscillatorNode !== null) {
                                return [2 /*return*/, nativeOscillatorNode];
                            }
                            nativeOscillatorNode = getNativeAudioNode(proxy);
                            if (!!isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext)) return [3 /*break*/, 3];
                            options = {
                                channelCount: nativeOscillatorNode.channelCount,
                                channelCountMode: nativeOscillatorNode.channelCountMode,
                                channelInterpretation: nativeOscillatorNode.channelInterpretation,
                                detune: nativeOscillatorNode.detune.value,
                                frequency: nativeOscillatorNode.frequency.value,
                                // @todo periodicWave is not exposed by the native node.
                                type: nativeOscillatorNode.type
                            };
                            nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);
                            if (start !== null) {
                                nativeOscillatorNode.start(start);
                            }
                            if (stop !== null) {
                                nativeOscillatorNode.stop(stop);
                            }
                            return [4 /*yield*/, renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency)];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 6];
                        case 3: return [4 /*yield*/, connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.detune)];
                        case 4:
                            _a.sent();
                            return [4 /*yield*/, connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.frequency)];
                        case 5:
                            _a.sent();
                            _a.label = 6;
                        case 6: return [4 /*yield*/, renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode)];
                        case 7:
                            _a.sent();
                            return [2 /*return*/, nativeOscillatorNode];
                    }
                });
            }); }
        };
    };
};
//# sourceMappingURL=/build/es2015/factories/oscillator-node-renderer-factory.js.map