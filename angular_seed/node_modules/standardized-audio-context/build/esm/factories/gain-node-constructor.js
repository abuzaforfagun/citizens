import * as tslib_1 from "tslib";
import { getNativeContext } from '../helpers/get-native-context';
var DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    gain: 1
};
export var createGainNodeConstructor = function (createAudioParam, createGainNodeRenderer, createNativeGainNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(GainNode, _super);
        function GainNode(context, options) {
            if (options === void 0) { options = DEFAULT_OPTIONS; }
            var _this = this;
            var nativeContext = getNativeContext(context);
            var mergedOptions = tslib_1.__assign({}, DEFAULT_OPTIONS, options);
            var nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);
            var isOffline = isNativeOfflineAudioContext(nativeContext);
            var gainNodeRenderer = (isOffline) ? createGainNodeRenderer() : null;
            _this = _super.call(this, context, nativeGainNode, gainNodeRenderer) || this;
            // Bug #74: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.
            _this._gain = createAudioParam(context, isOffline, nativeGainNode.gain, 3.4028234663852886e38, -3.4028234663852886e38);
            return _this;
        }
        Object.defineProperty(GainNode.prototype, "gain", {
            get: function () {
                return this._gain;
            },
            enumerable: true,
            configurable: true
        });
        return GainNode;
    }(noneAudioDestinationNodeConstructor));
};
//# sourceMappingURL=/build/es2015/factories/gain-node-constructor.js.map