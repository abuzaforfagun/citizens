var ReadOnlyMap = /** @class */ (function () {
    function ReadOnlyMap(parameters) {
        this._map = new Map(parameters);
    }
    Object.defineProperty(ReadOnlyMap.prototype, "size", {
        get: function () {
            return this._map.size;
        },
        enumerable: true,
        configurable: true
    });
    ReadOnlyMap.prototype.entries = function () {
        return this._map.entries();
    };
    ReadOnlyMap.prototype.forEach = function (callback, thisArg) {
        var _this = this;
        if (thisArg === void 0) { thisArg = null; }
        return this._map.forEach(function (value, key) { return callback.call(thisArg, value, key, _this); });
    };
    ReadOnlyMap.prototype.get = function (name) {
        return this._map.get(name);
    };
    ReadOnlyMap.prototype.has = function (name) {
        return this._map.has(name);
    };
    ReadOnlyMap.prototype.keys = function () {
        return this._map.keys();
    };
    ReadOnlyMap.prototype.values = function () {
        return this._map.values();
    };
    return ReadOnlyMap;
}());
export { ReadOnlyMap };
//# sourceMappingURL=/build/es2015/read-only-map.js.map