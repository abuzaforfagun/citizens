import { isAudioBufferSourceNode } from '../guards/audio-buffer-source-node';
import { isAudioWorkletNode } from '../guards/audio-worklet-node';
import { isBiquadFilterNode } from '../guards/biquad-filter-node';
import { isConstantSourceNode } from '../guards/constant-source-node';
import { isGainNode } from '../guards/gain-node';
import { isOscillatorNode } from '../guards/oscillator-node';
import { disconnectAudioParamInputConnections } from './disconnect-audio-param-input-connections';
export var disconnectAudioNodeInputConnections = function (audioGraph, audioNode) {
    var audioNodeConnections = audioGraph.nodes.get(audioNode);
    if (audioNodeConnections !== undefined) {
        var numberOfInputs = audioNodeConnections.inputs.length;
        for (var i = 0; i < numberOfInputs; i += 1) {
            var connections = audioNodeConnections.inputs[i];
            for (var _i = 0, _a = Array.from(connections); _i < _a.length; _i++) {
                var source = _a[_i][0];
                // @todo Disconnect the exact connection with its output and input parameters.
                source.disconnect(audioNode);
                disconnectAudioNodeInputConnections(audioGraph, source);
            }
        }
        if (isAudioBufferSourceNode(audioNode)) {
            // @todo disconnectAudioParamInputConnections(audioGraph, audioNode.detune, disconnectAudioNodeInputConnections);
            disconnectAudioParamInputConnections(audioGraph, audioNode.playbackRate, disconnectAudioNodeInputConnections);
        }
        else if (isAudioWorkletNode(audioNode)) {
            for (var _b = 0, _c = Array.from(audioNode.parameters.values()); _b < _c.length; _b++) {
                var audioParam = _c[_b];
                disconnectAudioParamInputConnections(audioGraph, audioParam, disconnectAudioNodeInputConnections);
            }
        }
        else if (isBiquadFilterNode(audioNode)) {
            disconnectAudioParamInputConnections(audioGraph, audioNode.Q, disconnectAudioNodeInputConnections);
            disconnectAudioParamInputConnections(audioGraph, audioNode.detune, disconnectAudioNodeInputConnections);
            disconnectAudioParamInputConnections(audioGraph, audioNode.frequency, disconnectAudioNodeInputConnections);
            disconnectAudioParamInputConnections(audioGraph, audioNode.gain, disconnectAudioNodeInputConnections);
        }
        else if (isConstantSourceNode(audioNode)) {
            disconnectAudioParamInputConnections(audioGraph, audioNode.offset, disconnectAudioNodeInputConnections);
        }
        else if (isGainNode(audioNode)) {
            disconnectAudioParamInputConnections(audioGraph, audioNode.gain, disconnectAudioNodeInputConnections);
        }
        else if (isOscillatorNode(audioNode)) {
            disconnectAudioParamInputConnections(audioGraph, audioNode.detune, disconnectAudioNodeInputConnections);
            disconnectAudioParamInputConnections(audioGraph, audioNode.frequency, disconnectAudioNodeInputConnections);
        }
    }
};
//# sourceMappingURL=/build/es2015/helpers/disconnect-audio-node-input-connections.js.map