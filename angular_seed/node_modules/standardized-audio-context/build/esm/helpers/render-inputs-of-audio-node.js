import { getAudioNodeConnections } from '../helpers/get-audio-node-connections';
import { getAudioNodeRenderer } from '../helpers/get-audio-node-renderer';
export var renderInputsOfAudioNode = function (audioNode, nativeOfflineAudioContext, nativeAudioNode) {
    var audioNodeConnections = getAudioNodeConnections(audioNode);
    return Promise
        .all(audioNodeConnections.inputs
        .map(function (connections, input) { return Array
        .from(connections.values())
        .map(function (_a) {
        var source = _a[0], output = _a[1];
        return getAudioNodeRenderer(source)
            .render(source, nativeOfflineAudioContext)
            .then(function (node) { return node.connect(nativeAudioNode, output, input); });
    }); })
        .reduce(function (allRenderingPromises, renderingPromises) { return allRenderingPromises.concat(renderingPromises); }, []));
};
//# sourceMappingURL=/build/es2015/helpers/render-inputs-of-audio-node.js.map