import { IAnalyserNode, IAnalyserNodeConstructor, IAudioBuffer, IAudioBufferConstructor, IAudioBufferSourceNode, IAudioBufferSourceNodeConstructor, IAudioContext, IAudioContextConstructor, IAudioNode, IAudioWorkletNode, IAudioWorkletNodeConstructor, IBiquadFilterNode, IBiquadFilterNodeConstructor, IChannelMergerNodeConstructor, IChannelSplitterNodeConstructor, IConstantSourceNode, IConstantSourceNodeConstructor, IGainNode, IGainNodeConstructor, IIIRFilterNode, IIIRFilterNodeConstructor, IMediaElementAudioSourceNode, IMediaElementAudioSourceNodeConstructor, IMediaStreamAudioSourceNode, IMediaStreamAudioSourceNodeConstructor, IMinimalAudioContext, IMinimalAudioContextConstructor, IMinimalOfflineAudioContext, IMinimalOfflineAudioContextConstructor, IOfflineAudioContext, IOfflineAudioContextConstructor, IOscillatorNode, IOscillatorNodeConstructor } from './interfaces';
export * from './interfaces';
export * from './types';
declare const analyserNodeConstructor: IAnalyserNodeConstructor;
declare type analyserNodeConstructor = IAnalyserNode;
export { analyserNodeConstructor as AnalyserNode };
declare const audioBufferConstructor: IAudioBufferConstructor;
declare type audioBufferConstructor = IAudioBuffer;
export { audioBufferConstructor as AudioBuffer };
declare const audioBufferSourceNodeConstructor: IAudioBufferSourceNodeConstructor;
declare type audioBufferSourceNodeConstructor = IAudioBufferSourceNode;
export { audioBufferSourceNodeConstructor as AudioBufferSourceNode };
declare const biquadFilterNodeConstructor: IBiquadFilterNodeConstructor;
declare const channelMergerNodeConstructor: IChannelMergerNodeConstructor;
declare const channelSplitterNodeConstructor: IChannelSplitterNodeConstructor;
declare const constantSourceNodeConstructor: IConstantSourceNodeConstructor;
declare const gainNodeConstructor: IGainNodeConstructor;
declare const iIRFilterNodeConstructor: IIIRFilterNodeConstructor;
declare const oscillatorNodeConstructor: IOscillatorNodeConstructor;
declare const mediaElementAudioSourceNodeConstructor: IMediaElementAudioSourceNodeConstructor;
declare const mediaStreamAudioSourceNodeConstructor: IMediaStreamAudioSourceNodeConstructor;
declare const audioContextConstructor: IAudioContextConstructor;
declare type audioContextConstructor = IAudioContext;
export { audioContextConstructor as AudioContext };
declare const audioWorkletNodeConstructor: IAudioWorkletNodeConstructor;
declare type audioWorkletNodeConstructor = IAudioWorkletNode;
export { audioWorkletNodeConstructor as AudioWorkletNode };
declare type biquadFilterNodeConstructor = IBiquadFilterNode;
export { biquadFilterNodeConstructor as BiquadFilterNode };
declare type channelMergerNodeConstructor = IAudioNode;
export { channelMergerNodeConstructor as ChannelMergerNode };
declare type channelSplitterNodeConstructor = IAudioNode;
export { channelSplitterNodeConstructor as ChannelSplitterNode };
declare type constantSourceNodeConstructor = IConstantSourceNode;
export { constantSourceNodeConstructor as ConstantSourceNode };
declare type gainNodeConstructor = IGainNode;
export { gainNodeConstructor as GainNode };
declare type iIRFilterNodeConstructor = IIIRFilterNode;
export { iIRFilterNodeConstructor as IIRFilterNode };
declare type mediaElementAudioSourceNodeConstructor = IMediaElementAudioSourceNode;
export { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };
declare type mediaStreamAudioSourceNodeConstructor = IMediaStreamAudioSourceNode;
export { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };
declare const minimalAudioContextConstructor: IMinimalAudioContextConstructor;
declare type minimalAudioContextConstructor = IMinimalAudioContext;
export { minimalAudioContextConstructor as MinimalAudioContext };
declare const minimalOfflineAudioContextConstructor: IMinimalOfflineAudioContextConstructor;
declare type minimalOfflineAudioContextConstructor = IMinimalOfflineAudioContext;
export { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };
declare const offlineAudioContextConstructor: IOfflineAudioContextConstructor;
declare type offlineAudioContextConstructor = IOfflineAudioContext;
export { offlineAudioContextConstructor as OfflineAudioContext };
declare type oscillatorNodeConstructor = IOscillatorNode;
export { oscillatorNodeConstructor as OscillatorNode };
export { addAudioWorkletModule } from './add-audio-worklet-module';
export { decodeAudioData } from './decode-audio-data';
export declare const isSupported: () => Promise<boolean>;
