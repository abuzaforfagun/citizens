import { AUDIO_PARAM_STORE } from '../globals';
import { getAudioGraph } from '../helpers/get-audio-graph';
const addAudioParam = (context, audioParam, audioParamRenderer) => {
    const audioGraphOfContext = getAudioGraph(context);
    audioGraphOfContext.params.set(audioParam, { inputs: new Set(), renderer: audioParamRenderer });
};
export const createAudioParamFactory = (createAudioParamRenderer) => {
    return (context, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {
        const audioParamRenderer = (isAudioParamOfOfflineAudioContext) ? createAudioParamRenderer() : null;
        const audioParam = {
            get defaultValue() {
                return nativeAudioParam.defaultValue;
            },
            get maxValue() {
                return (maxValue === null) ? nativeAudioParam.maxValue : maxValue;
            },
            get minValue() {
                return (minValue === null) ? nativeAudioParam.minValue : minValue;
            },
            get value() {
                return nativeAudioParam.value;
            },
            set value(value) {
                nativeAudioParam.value = value;
                if (audioParamRenderer !== null) {
                    audioParamRenderer.record({ startTime: context.currentTime, type: 'setValue', value });
                }
            },
            cancelScheduledValues(cancelTime) {
                nativeAudioParam.cancelScheduledValues(cancelTime);
                // @todo
                return audioParam;
            },
            exponentialRampToValueAtTime(value, endTime) {
                nativeAudioParam.exponentialRampToValueAtTime(value, endTime);
                if (audioParamRenderer !== null) {
                    audioParamRenderer.record({ endTime, type: 'exponentialRampToValue', value });
                }
                return audioParam;
            },
            linearRampToValueAtTime(value, endTime) {
                nativeAudioParam.linearRampToValueAtTime(value, endTime);
                if (audioParamRenderer !== null) {
                    audioParamRenderer.record({ endTime, type: 'linearRampToValue', value });
                }
                return audioParam;
            },
            setTargetAtTime(target, startTime, timeConstant) {
                nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);
                if (audioParamRenderer !== null) {
                    audioParamRenderer.record({ startTime, target, timeConstant, type: 'setTarget' });
                }
                return audioParam;
            },
            setValueAtTime(value, startTime) {
                nativeAudioParam.setValueAtTime(value, startTime);
                if (audioParamRenderer !== null) {
                    audioParamRenderer.record({ startTime, type: 'setValue', value });
                }
                return audioParam;
            },
            setValueCurveAtTime(values, startTime, duration) {
                // @todo TypeScript is expecting values to be an array of numbers.
                nativeAudioParam.setValueCurveAtTime(values, startTime, duration);
                if (audioParamRenderer !== null) {
                    audioParamRenderer.record({ duration, startTime, type: 'setValueCurve', values });
                }
                return audioParam;
            }
        };
        AUDIO_PARAM_STORE.set(audioParam, nativeAudioParam);
        addAudioParam(context, audioParam, audioParamRenderer);
        return audioParam;
    };
};
//# sourceMappingURL=/build/es2015/factories/audio-param-factory.js.map