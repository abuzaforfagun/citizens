import * as tslib_1 from "tslib";
import { connectAudioParam } from '../helpers/connect-audio-param';
import { getNativeAudioNode } from '../helpers/get-native-audio-node';
import { isOwnedByContext } from '../helpers/is-owned-by-context';
import { renderAutomation } from '../helpers/render-automation';
import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';
export const createConstantSourceNodeRendererFactory = (createNativeConstantSourceNode) => {
    return () => {
        let nativeConstantSourceNode = null;
        let start = null;
        let stop = null;
        return {
            set start(value) {
                start = value;
            },
            set stop(value) {
                stop = value;
            },
            render: (proxy, nativeOfflineAudioContext) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (nativeConstantSourceNode !== null) {
                    return nativeConstantSourceNode;
                }
                nativeConstantSourceNode = getNativeAudioNode(proxy);
                /*
                 * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be
                 * created again.
                 */
                if (!isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext)) {
                    const options = {
                        channelCount: nativeConstantSourceNode.channelCount,
                        channelCountMode: nativeConstantSourceNode.channelCountMode,
                        channelInterpretation: nativeConstantSourceNode.channelInterpretation,
                        offset: nativeConstantSourceNode.offset.value
                    };
                    nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);
                    if (start !== null) {
                        nativeConstantSourceNode.start(start);
                    }
                    if (stop !== null) {
                        nativeConstantSourceNode.stop(stop);
                    }
                    yield renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);
                }
                else {
                    yield connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.offset);
                }
                yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);
                return nativeConstantSourceNode;
            })
        };
    };
};
//# sourceMappingURL=/build/es2015/factories/constant-source-node-renderer-factory.js.map