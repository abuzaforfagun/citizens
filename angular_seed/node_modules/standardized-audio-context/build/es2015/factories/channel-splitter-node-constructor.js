import { getNativeContext } from '../helpers/get-native-context';
const DEFAULT_OPTIONS = {
    channelCount: 6,
    channelCountMode: 'explicit',
    channelInterpretation: 'discrete',
    numberOfOutputs: 6
};
const sanitizedOptions = (options) => {
    return Object.assign({}, options, { channelCount: options.numberOfOutputs });
};
export const createChannelSplitterNodeConstructor = (createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {
    return class ChannelSplitterNode extends noneAudioDestinationNodeConstructor {
        constructor(context, options = DEFAULT_OPTIONS) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = sanitizedOptions(Object.assign({}, DEFAULT_OPTIONS, options));
            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);
            const channelSplitterNodeRenderer = (isNativeOfflineAudioContext(nativeContext)) ? createChannelSplitterNodeRenderer() : null;
            super(context, nativeChannelSplitterNode, channelSplitterNodeRenderer);
        }
    };
};
//# sourceMappingURL=/build/es2015/factories/channel-splitter-node-constructor.js.map