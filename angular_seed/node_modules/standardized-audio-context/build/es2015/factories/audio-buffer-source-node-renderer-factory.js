import * as tslib_1 from "tslib";
import { getNativeAudioNode } from '../helpers/get-native-audio-node';
import { isOwnedByContext } from '../helpers/is-owned-by-context';
import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';
export const createAudioBufferSourceNodeRendererFactory = (createNativeAudioBufferSourceNode) => {
    return () => {
        let nativeAudioBufferSourceNode = null;
        let start = null;
        let stop = null;
        return {
            set start(value) {
                start = value;
            },
            set stop(value) {
                stop = value;
            },
            render: (proxy, nativeOfflineAudioContext) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (nativeAudioBufferSourceNode !== null) {
                    return nativeAudioBufferSourceNode;
                }
                nativeAudioBufferSourceNode = getNativeAudioNode(proxy);
                /*
                 * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be
                 * created again.
                 */
                if (!isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext)) {
                    const options = {
                        buffer: nativeAudioBufferSourceNode.buffer,
                        channelCount: nativeAudioBufferSourceNode.channelCount,
                        channelCountMode: nativeAudioBufferSourceNode.channelCountMode,
                        channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,
                        detune: 0,
                        loop: nativeAudioBufferSourceNode.loop,
                        loopEnd: nativeAudioBufferSourceNode.loopEnd,
                        loopStart: nativeAudioBufferSourceNode.loopStart,
                        playbackRate: nativeAudioBufferSourceNode.playbackRate.value
                    };
                    nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);
                    if (start !== null) {
                        nativeAudioBufferSourceNode.start(...start);
                    }
                    if (stop !== null) {
                        nativeAudioBufferSourceNode.stop(stop);
                    }
                }
                yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);
                return nativeAudioBufferSourceNode;
            })
        };
    };
};
//# sourceMappingURL=/build/es2015/factories/audio-buffer-source-node-renderer-factory.js.map